/* * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de * Saneamento This file is part of GSAN, an integrated service management system * for Sanitation GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by the Free * Software Foundation; either version 2 of the License. GSAN is distributed in * the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See * the GNU General Public License for more details. You should have received a * copy of the GNU General Public License along with this program; if not, write * to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, * MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento Copyright (C) * <2007> Adriano Britto Siqueira Alexandre Santos Cabral Ana Carolina Alves * Breda Ana Maria Andrade Cavalcante Aryed Lins de Araújo Bruno Leonardo * Rodrigues Barros Carlos Elmano Rodrigues Ferreira Cláudio de Andrade Lira * Denys Guimarães Guenes Tavares Eduardo Breckenfeld da Rosa Borges Fabíola * Gomes de Araújo Flávio Leonardo Cavalcanti Cordeiro Francisco do Nascimento * Júnior Homero Sampaio Cavalcanti Ivan Sérgio da Silva Júnior José Edmar de * Siqueira José Thiago Tenório Lopes Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva Márcio Roberto Batista da Silva Maria de Fátima * Sampaio Leite Micaela Maria Coelho de Araújo Nelson Mendonça de Carvalho * Newton Morais e Silva Pedro Alexandre Santos da Silva Filho Rafael Corrêa * Lima e Silva Rafael Francisco Pinto Rafael Koury Monteiro Rafael Palermo de * Araújo Raphael Veras Rossiter Roberto Sobreira Barbalho Rodrigo Avellar * Silveira Rosana Carvalho Barbosa Sávio Luiz de Andrade Cavalcante Tai Mu Shih * Thiago Augusto Souza do Nascimento Tiago Moreno Rodrigues Vivianne Barbosa * Sousa Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme publicada * pela Free Software Foundation; versão 2 da Licença. Este programa é * distribuído na expectativa de ser útil, mas SEM QUALQUER GARANTIA; sem mesmo * a garantia implícita de COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO * EM PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU junto com este * programa; se não, escreva para Free Software Foundation, Inc., 59 Temple * Place, Suite 330, Boston, MA 02111-1307, USA. */package gcom.gerencial.faturamento;import gcom.faturamento.ResumoFaturamentoSituacaoEspecial;import gcom.gerencial.bean.InformarDadosGeracaoRelatorioConsultaHelper;import gcom.gerencial.faturamento.bean.ConsultarResumoSituacaoEspecialHelper;import gcom.gerencial.faturamento.bean.FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper;import gcom.gerencial.faturamento.bean.FiltrarResumoDadosCasHelper;import gcom.gerencial.faturamento.bean.ResumoFaturamentoGuiaPagamentoNovoHelper;import gcom.gerencial.faturamento.bean.ResumoFaturamentoHelper;import gcom.gerencial.faturamento.bean.ResumoFaturamentoPorAnoHelper;import gcom.gerencial.faturamento.bean.ResumoReFaturamentoNovoHelper;import gcom.util.ErroRepositorioException;import java.math.BigDecimal;import java.util.Collection;import java.util.List;/** * @author Thiago Toscano * @created 19/04/2006 */public interface IRepositorioGerencialFaturamento {    /**     * Método que consulta os ResumoFaturamentoSituacaoEspecialHelper     *      * @author Thiago Toscano     * @date 15/05/2006     * @return     * @throws ErroRepositorioException     */    public List getResumoFaturamentoSituacaoEspecialHelper(int idLocalidade)            throws ErroRepositorioException;    /**     * Método que insere o ResumoFaturamentoSituacaoEspecial em batch     *      * @author Thiago Toscano     * @date 15/05/2006     * @param listResumoFaturamentoSituacaoEspecialHelper     * @throws ErroRepositorioException     */    public void inserirResumoFaturamentoSituacaoEspecial(            List<ResumoFaturamentoSituacaoEspecial> list)            throws ErroRepositorioException;    /**     * Método que exclui todos os ResumoFaturamentoSituacaoEspecial [CU0341] -     * Gerar Resumo de Situacao Especial de Faturamento     *      * @author Thiago Toscano     * @date 15/05/2006     * @throws ErroRepositorioException     */    public void excluirTodosResumoFaturamentoSituacaoEspecial(int idLocalidade)            throws ErroRepositorioException;    public Collection pesquisarResumoFaturamentoSituacaoEspecialConsultaHelper(            Integer[] idSituacaoTipo, Integer[] idSituacaoMotivo)            throws ErroRepositorioException;    public Collection<Object[]> pesquisarResumoFaturamentoSituacaoEspecialConsultaGerenciaRegionalHelper(    		ConsultarResumoSituacaoEspecialHelper helper) throws ErroRepositorioException;        public Collection<Object[]> pesquisarResumoFaturamentoSituacaoEspecialConsultaUnidadeNegocioHelper(			ConsultarResumoSituacaoEspecialHelper helper) throws ErroRepositorioException;    public Collection<Object[]> pesquisarResumoFaturamentoSituacaoEspecialConsultaLocalidadeHelper(    		ConsultarResumoSituacaoEspecialHelper helper) throws ErroRepositorioException;        public Collection<Object[]> pesquisarResumoFaturamentoSituacaoEspecialConsultaSetorComercialHelper(			ConsultarResumoSituacaoEspecialHelper helper) throws ErroRepositorioException;    public Collection<Object[]> pesquisarResumoFaturamentoSituacaoEspecialConsultaSitTipoHelper(    		ConsultarResumoSituacaoEspecialHelper helper) throws ErroRepositorioException;    public Collection<Object[]> pesquisarResumoFaturamentoSituacaoEspecialConsultaMotivoHelper(    		ConsultarResumoSituacaoEspecialHelper helper)            throws ErroRepositorioException;    public Collection<BigDecimal> pesquisarResumoFaturamentoSituacaoEspecialConsultaFatEstimadoHelper(    		ConsultarResumoSituacaoEspecialHelper helper, int anoMesReferencia)            throws ErroRepositorioException;    public Integer pesquisarResumoFaturamentoSituacaoEspecialConsultaQtLigacoes(    		ConsultarResumoSituacaoEspecialHelper helper, int anoMesReferencia)            throws ErroRepositorioException;    /**     * Este caso de uso permite consultar o resumo da pendência, com a opção de     * impressão da consulta. Dependendo da opção de totalização sempre é gerado     * o relatório, sem a feração da consulta. [UC0305] Consultar Análise     * Faturamento consultarResumoAnaliseFaturamento     *      * @author Fernanda Paiva     * @date 31/05/2006     * @param informarDadosGeracaoRelatorioConsultaHelper     * @return     * @throws ErroRepositorioException     */    public List consultarResumoAnaliseFaturamento(            InformarDadosGeracaoRelatorioConsultaHelper informarDadosGeracaoRelatorioConsultaHelper)            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o resumo do     * faturamento     *      * @author Marcio Roberto     * @date 12/05/2007     * @return     * @throws ErroRepositorioException     */    public List getResumoFaturamentoAguaEsgoto(int idSetor, int anoMes,            int indice, int qtRegistros) throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa os imoveis com     * debitos acobrar     *      * @author Roberto Barbalho     * @date 26/07/2007     * @return     * @throws ErroRepositorioException     */    public List getImoveisResumoFaturamento(int idSetor, int anoMes,            int indice, int qtRegistros) throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o debito     * cobrado     *      * @author Marcio Roberto     * @date 17/05/2007     * @return     * @throws ErroRepositorioException     */    public List getPesquisaDebitoCobrado(int idConta, int idImovel, int anoMes)            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa os impostos     * deduzidos     *      * @author Roberto Barbalho     * @date 28/08/2007     * @return     * @throws ErroRepositorioException     */    public List getPesquisaCreditoRealizado(int idSetor, int mesAno)            throws ErroRepositorioException;    /**     * pesquisarEsferaPoderClienteResponsavelImovel     *      * @author Marcio Roberto     * @date 05/06/2007     * @param imovel     *            a ser pesquisado     * @return Esfera de poder do cliente responsavel pelo imovel     * @exception ErroRepositorioException     */    public Integer pesquisarEsferaPoderClienteResponsavelImovel(Integer idImovel)            throws ErroRepositorioException;    /**     * pesquisarTipoClienteClienteResponsavelImovel     *      * @author Marcio Roberto     * @date 05/06/2007     * @param imovel     *            a ser pesquisado     * @return Tipo de cliente do cliente responsavel pelo imovel     * @exception ErroRepositorioException     */    public Integer pesquisarTipoClienteClienteResponsavelImovel(Integer idImovel)            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o resumo do     * Re-faturamento     *      * @author Marcio Roberto     * @date 12/05/2007     * @return     * @throws ErroRepositorioException     */    public List getResumoReFaturamento(int idSetor, int anoMes, int indice,            int qtRegistros) throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa as contas do     * resumo do faturamento     *      * @author Marcio Roberto     * @date 03/07/2007     * @return     * @throws ErroRepositorioException     */    public List getContasResumoFaturamentoAguaEsgoto(int idSetor, int anoMes,            int indice, int qtRegistros) throws ErroRepositorioException;    public Collection<Integer> pesquisarIdsSetores()            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o resumo do     * faturamento Debito a Cobrar     *      * @author Marcio Roberto     * @date 17/05/2007     * @return     * @throws ErroRepositorioException     */    public List getPesquisaDebitoACobrar(int idSetor, int anoMes)            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o resumo do     * faturamento Debito a Cobrar     *      * @author Roberto Barbalho     * @date 28/08/2007     * @return     * @throws ErroRepositorioException     */    public List getPesquisaImpostos(int idConta)            throws ErroRepositorioException;    /**     * Seleciona o maior mês/ano de referência da tabela un_resumo_faturamento     * [UC????] - Gerar Resumo Indicadores do Faturamento     *      * @author Rafael Corrêa     * @date 25/03/2008     * @return     * @throws ErroRepositorioException     */    public Integer pesquisarMaiorAnoMesResumoFaturamento()            throws ErroRepositorioException;    /**     * Seleciona o maior mês/ano de referência da tabela un_resumo_refaturamento     * [UC????] - Gerar Resumo Indicadores do Faturamento     *      * @author Rafael Corrêa     * @date 25/03/2008     * @return     * @throws ErroRepositorioException     */    public Integer pesquisarMaiorAnoMesResumoRefaturamento()            throws ErroRepositorioException;    /**     * Seleciona o maior mês/ano de referência da tabela     * un_resumo_indicadores_faturamento [UC????] - Gerar Resumo Indicadores do     * Faturamento     *      * @author Rafael Corrêa     * @date 25/03/2008     * @return     * @throws ErroRepositorioException     */    public Integer pesquisarMaiorAnoMesResumoIndicadoresFaturamento()            throws ErroRepositorioException;    /**     * Atualiza os dados na tabela un_resumo_indicadores_faturamento [UC????] -     * Gerar Resumo Indicadores do Faturamento     *      * @author Rafael Corrêa     * @date 25/03/2008     * @return     * @throws ErroRepositorioException     */    public void atualizarDadosResumoIndicadoresFaturamento(            Integer anoMesReferenciaIndicador, Integer anoMesReferenciaTabelas)            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o resumo do     * faturamento (Guia de Pagamento)     *      * @author Marcio Roberto     * @date 05/09/2007     * @return     * @throws ErroRepositorioException     */    public List getPesquisaGuiaPagamento(int idSetor, int anoMes)            throws ErroRepositorioException;    /**     * Método que retona uma lista de objeto xxxxx que representa o resumo do     * Refaturamento (Guia de Pagamento)     *      * @author Roberto Barbalho     * @date 05/11/2007     * @return     * @throws ErroRepositorioException     */    public List getPesquisaGuiaPagamentoRefaturamento(int idSetor, int anoMes)            throws ErroRepositorioException;    /**     * Método que retorna o valor anterior da conta retificada     *      * @author Roberto Barbalho     * @date 22/11/2007     * @return     * @throws ErroRepositorioException     */    public List getValorAnteriorContaRetificada(int idImovel, int anoMesRef,            int anoMes, int verif) throws ErroRepositorioException;    /**     * [UC057] - Emitir Contas     *     * Pesquisamos as contas que serão usadas no resumo de contas     *     * @author Bruno Barros     * @date 18/09/2008     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarContasResumoFaturamento(Integer idSetor)            throws ErroRepositorioException;        /**     * [UC0571] - Gerar Resumo do Faturamento     *     * Pesquisamos as guias que serão usadas no resumo de guias de pagamento     *     * @author Bruno Barros     * @date 20/08/2008     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarGuiasResumoFaturamento(Integer idSetor)            throws ErroRepositorioException;        /**     * [UC0571] - Gerar Resumo do Faturamento     *     * Pesquisamos os debitos cobrados a serem usados no resumo de financiamento     *     * @author Bruno Barros     * @date 25/08/2008     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarFinanciamento(Integer idSetor)            throws ErroRepositorioException;        /**     * [UC0571] - Gerar Resumo do Faturamento     *     * Inserir os dados na tabela un_resumo_faturamento     *     * @author Bruno Barros     * @date 27/08/2008     *     * @param helper Helper de agrupamento dos dados     * @throws ErroRepositorioException     */    public void inserirResumoFaturamento( ResumoFaturamentoHelper helper )        throws ErroRepositorioException;        /**     * [UC0572] - Gerar Resumo do ReFaturamento     *     * Pesquisamos as contas que serão usadas no resumo de contas     *     * @author Bruno Barros     * @date 24/11/2008     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarContasResumoReFaturamentoOlap(Integer idSetor)            throws ErroRepositorioException;        /**     * [UC0572] - Gerar Resumo do ReFaturamento     *     * Pesquisamos a conta com status de cancelada por retificação     *     * @author Bruno Barros     * @date 24/11/2008     *     * @param idImovel     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarContaCanceladaRetificacao(Integer idImovel)            throws ErroRepositorioException;        /**     * [UC0572] - Gerar Resumo do ReFaturamento     *     * Pesquisamos a conta com status de retificada     *     * @author Bruno Barros     * @date 26/11/2008     *     * @param idImovel     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarContaRetificada(Integer idImovel)            throws ErroRepositorioException;        /**     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 12/04/2010     *     * @return colectionResumoLigacaoEconomia     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ErroRepositorioException     */    public Collection<Object> pesquisarResumoLigacaoEconomiaRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)            throws ErroRepositorioException;        /**     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 12/04/2010     *     * @return colectionResumoConsumoAgua     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ErroRepositorioException     */            public Collection<Object> pesquisarResumoConsumoAguaRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)            throws ErroRepositorioException;    /**     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 12/04/2010     *     * @return colectionResumoLeituraAnormalidade     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ErroRepositorioException     */    public Collection<Object> pesquisaResumoLeituraAnormalidadeRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)            throws ErroRepositorioException;            /**     * [UC1003] - Emitir Relatorio Demonstrativo Sintetico das Ligacoes              *     * @author Daniel Alves     * @date 12/04/2010     *     * @return colectionResumoInstalacaoHidrometro     * @param FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper     * @throws ErroRepositorioException     */    public Collection<Object> pesquisaResumoInstalacaoHidrometroRelatorioDemonstrativo(FiltrarRelatorioDemonstrativoSinteticoLigacoesHelper filtro)            throws ErroRepositorioException;        /**	 * Pesquisa todas as tabelas de resumo para o relatorio	 *	 * [UC1003] - Gerar Relatorio Demonstrativo Sintetico das Ligacoes	 *	 * @author Daniel Alves	 * @date 16/04/2010	 *	 * @return anoMesReferencia	 * 	 * @throws ErroRepositorioException	 */	public boolean existeDadosUnResumoParaRelatorioDemonstrativoSintLigacoes(int anoMesReferencia) 		throws ErroRepositorioException;	/**     * Gerar Resumo do Faturamento Por Ano     *     * Pesquisamos as contas que serão usadas no resumo de contas Por Ano     *     * @author Fernando Fontelles     * @date 25/05/2010     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarContasResumoFaturamentoPorAno(Integer idSetor)            throws ErroRepositorioException;	/**	 * Pesquisa todas as tabelas de resumo para o "relatorio"	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 03/05/2010	 *	 * @return anoMesReferencia	 * 	 * @throws ErroRepositorioException	 */	public boolean existeDadosUnResumoParaResumoDadosCas(int anoMesReferencia) 		throws ErroRepositorioException;			/**	 * Pesquisa o Resumo de Ligações Economias para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 04/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoLigacaoEconomiaResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;    /**     * Gerar Resumo do Faturamento Por Ano     *     * Inserir os dados na tabela un_resumo_faturamento_ref_2010     *     * @author Fernando Fontelles Filho     * @date 25/05/2010     *     * @param helper Helper de agrupamento dos dados     * @throws ErroRepositorioException     */    public void inserirResumoFaturamentoPorAno( ResumoFaturamentoPorAnoHelper helper )        throws ErroRepositorioException;        /**     * Gerar Resumo do Faturamento Por Ano     *     * Pesquisamos as guias que serão usadas no resumo de guias de pagamento     *     * @author Fernando Fontelles     * @date 25/05/2010     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarGuiasResumoFaturamentoPorAno(Integer idSetor)            throws ErroRepositorioException;        /**     * Gerar Resumo do Faturamento Por Ano     *     * Pesquisamos os debitos cobrados a serem usados no resumo de financiamento     *     * @author Fernando Fontelles     * @date 26/05/2010     *     * @param idSetorComercial     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarFinanciamentoPorAno(Integer idSetor)            throws ErroRepositorioException;        /**	 * Pesquisa o Resumo de Consumo Agua para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 04/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoConsumoAguaResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;        /**	 * Pesquisa o Resumo de Coleta Esgoto para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 04/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoColetaEsgotoResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;            /**	 * Pesquisa o Resumo Arrecadacao para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 04/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoArrecadacaoResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;            /**	 * Pesquisa o Resumo Faturamento para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 04/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoFaturamentoResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;            /**	 * Pesquisa o Resumo de Pendências para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 06/05/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoPendenciaResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;    /**	 * Pesquisa o Resumo Faturamento para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 06/07/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoFaturamentoResumoDadosCasComercial(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;    /**     *      * UC0572 - Gerar Resumo ReFaturamento Novo     *      * Este metodo verifica a existencia do resumo refaturamento     *      * @author Fernando Fontelles     * @date 29/06/2010     *      */    public Integer verificarExistenciaResumoReFaturamento(    		int anoMes)    		throws ErroRepositorioException;        /**	 * [UC0572] - Gerar Resumo ReFaturamento Novo	 * 	 * Gera Resumo Refaturamento Contas	 * 	 * @author Fernando Fontelles	 * @date 29/06/2010	 * 	 * @return	 * @throws ErroRepositorioException	 */	public List getResumoRefaturamentoContas(int idSetor, int anoMes, int indice, int qtRegistros) 			throws ErroRepositorioException;    	/**	 * Método que retona uma lista de objeto xxxxx que representa o resumo do	 * Refaturamento NOVO(Guia de Pagamento)	 * 	 * @author Fernando Fontelles	 * @date 01/07/2010	 * 	 * @return	 * @throws ErroRepositorioException	 */	 public List getPesquisaGuiaPagamentoRefaturamentoNovo(int idSetor, int anoMes) 	        throws ErroRepositorioException;	 	 /**	     * Gerar Resumo do ReFaturamento Novo	     *	     * Inserir os dados na tabela un_resumo_refaturamento	     *	     * @author Fernando Fontelles Filho	     * @date 02/07/2010	     *	     * @param helper Helper de agrupamento dos dados	     * @throws ErroRepositorioException	     */	    public void inserirResumoReFaturamentoNovo( ResumoFaturamentoGuiaPagamentoNovoHelper helper )	        throws ErroRepositorioException;	    /**     * Gerar Resumo do ReFaturamento Novo     *     * Inserir os dados na tabela un_resumo_refaturamento     *     * @author Fernando Fontelles Filho     * @date 02/07/2010     *     * @param helper Helper de agrupamento dos dados     * @throws ErroRepositorioException     */    public void inserirResumoReFaturamentoNovo( ResumoReFaturamentoNovoHelper helper )        throws ErroRepositorioException;        /**	 * [UC0305] Consultar análise Faturamento	 * 	 * @author Hugo Amorim	 * @date 06/08/2010	 * 	 */	public Collection consultarResumoAnaliseFaturamentoDetalhe(InformarDadosGeracaoRelatorioConsultaHelper 			informarDadosGeracaoRelatorioConsultaHelper) throws ErroRepositorioException;		/**	 * [UC0305] Consultar análise Faturamento	 * 		-Pesquisa para geração relatorio.	 * @author Hugo Amorim	 * @date 06/08/2010	 * 	 */	public List consultarResumoAnaliseFaturamentoRelatorio(InformarDadosGeracaoRelatorioConsultaHelper 			informarDadosGeracaoRelatorioConsultaHelper) throws ErroRepositorioException;			/**	 * Pesquisa o Resumo de Instalacao de Hidrometro para 	 *  o Resumo com Dados para o CAS	 *	 * [UC1017] - Gerar Resumo com Dados para o CAS	 *	 * @author Daniel Alves	 * @date 09/09/2010	 *	 * @return Collection<Object>	 */    public Collection<Object> pesquisaResumoInstalacaoHidrometroResumoDadosCas(FiltrarResumoDadosCasHelper filtro)throws ErroRepositorioException;        /**     * [UC0571] Gerar Resumo Faturamento     * [SB0016]  Preparar Dados do Resumo para Créditos a Realizar     *      * @author Ivan Sergio     * @data 18/01/2011     *       * @param idSetor     * @return     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarCreditoARealizar(Integer idSetor) throws ErroRepositorioException;        /**     * [UC0571] Gerar Resumo Faturamento     * [SB0017]  Gerar Resumo Guia de Devolução.     *      * @author Ivan Sergio     * @data 19/01/2011     *       * @param idSetor     * @return     * @throws ErroRepositorioException     */    public Collection<Object[]> pesquisarGuiasDevolucao(Integer idSetor) throws ErroRepositorioException;    //  Por Tiago Moreno - 29/07/11        public Object[] getValorCreditoIncluidoCancelado(int idImovel,int anoMes, int anoMesRef)		throws ErroRepositorioException;        /**     * Por Tiago Moreno     * 03/08/2011     */    public BigDecimal getValorCredito2ou3IncluidoCancelado(Integer idConta) throws ErroRepositorioException;        /**     * Por Tiago Moreno     * 03/08/2011     */        public BigDecimal getValorDebito2ou3IncluidoCancelado(Integer idConta) throws ErroRepositorioException;        /**     * Por Tiago Moreno     * 03/08/2011     */    	public Object[] getValorDebitoIncluidoCancelado(int idImovel,int anoMes, int anoMesRef)		throws ErroRepositorioException;	    public BigDecimal getValorDebito2ou3IncluidoCanceladoCategoria(Integer idConta, int idCategoria) throws ErroRepositorioException;        public BigDecimal getValorCredito2ou3IncluidoCanceladoCategoria(Integer idConta, int idCategoria) throws ErroRepositorioException;    	public Object[] getValorDebitoIncluidoCanceladoCategoria(int idImovel,int anoMes, int anoMesRef, int idCategoria)	throws ErroRepositorioException;		public Object[] getValorCreditoIncluidoCanceladoCategoria(int idImovel,int anoMes, int anoMesRef, int idCategoria)	throws ErroRepositorioException;		public List getValorAnteriorContaRetificadaCategoria(int idImovel, int anoMesRef , int anoMes, int verif, int idCategoria ) 		throws ErroRepositorioException;		public Object[] getValorAguaEsgotoIncluidoCanceladoCategoria(int idImovel,int anoMes, int anoMesRef, int idCategoria, int idSubcategoria)		throws ErroRepositorioException;		 /** - Nova pesquisa de Créditos para gerar Resumo de Faturamento     * do gerencial para corrigir problema de créditos persistidos na categoria errada     *      * @author Wellington Rocha     * @date 12/09/2011     */    public List pesquisarCreditosRealizadosResumoFaturamentoGerencial (int idConta)throws ErroRepositorioException;        /** - Pesquisa de Guias de pagamento para gerar resumo do faturamento,      * excluindo as guias de entrada de parcelamento pagas.     *      * @author Wellington Rocha     * @date 14/09/2011     */    public List pesquisarGuiaPagamentoResumoFaturamentoGerencial (int idSetor, int anoMes)throws ErroRepositorioException;}
